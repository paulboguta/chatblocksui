{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "markdown",
  "type": "registry:ui",
  "title": "Markdown",
  "description": "A markdown rendering component for AI chat applications with syntax highlighting.",
  "dependencies": [
    "marked",
    "shiki",
    "next-themes"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "src/components/chatblocks/markdown.tsx",
      "content": "'use client';\n\nimport { marked } from 'marked';\nimport * as React from 'react';\nimport { cn } from '@/lib/utils';\nimport { CodeBlock, CodeBlockCode } from './code-block';\n\ninterface MarkdownProps extends React.HTMLAttributes<HTMLDivElement> {\n  content: string;\n  /** Custom renderer for code blocks */\n  renderCodeBlock?: (\n    code: string,\n    language?: string,\n    index?: number\n  ) => React.ReactNode;\n  /** Additional prose class names */\n  proseClassName?: string;\n}\n\nconst Markdown = React.memo(\n  ({\n    className,\n    content,\n    renderCodeBlock,\n    proseClassName,\n    ...props\n  }: MarkdownProps) => {\n    const processedContent = React.useMemo(() => {\n      if (!content) { return null; }\n\n      try {\n        const tokens = marked.lexer(content);\n\n        return tokens\n          .map((token, index) => {\n            // Handle code blocks with custom renderer\n            if (token.type === 'code') {\n              if (renderCodeBlock) {\n                return (\n                  <React.Fragment key={`code-${index}`}>\n                    {renderCodeBlock(token.text, token.lang, index)}\n                  </React.Fragment>\n                );\n              }\n\n              return (\n                <CodeBlock className=\"my-4\" key={`code-${index}`}>\n                  <CodeBlockCode code={token.text} language={token.lang} />\n                </CodeBlock>\n              );\n            }\n\n            // Parse other tokens\n            const html = marked.parser([token]);\n\n            // Skip empty paragraphs\n            if (token.type === 'paragraph' && !token.text?.trim()) {\n              return null;\n            }\n\n            return (\n              <div\n                className=\"markdown-block\"\n                dangerouslySetInnerHTML={{ __html: html }}\n                key={`block-${index}`}\n              />\n            );\n          })\n          .filter(Boolean);\n      } catch {\n        // Fallback to basic HTML rendering\n        return (\n          <div\n            dangerouslySetInnerHTML={{\n              __html: marked.parse(content),\n            }}\n          />\n        );\n      }\n    }, [content, renderCodeBlock]);\n\n    return (\n      <div\n        className={cn(\n          'prose prose-sm max-w-none',\n          // Base text colors\n          'prose-headings:text-foreground',\n          'prose-p:text-foreground',\n          'prose-li:text-foreground',\n          'prose-td:text-foreground',\n          'prose-th:text-foreground',\n          // Emphasis and strong\n          'prose-em:text-foreground',\n          'prose-strong:text-foreground',\n          // Code styling\n          'prose-code:text-foreground',\n          'prose-code:bg-muted',\n          'prose-code:px-1',\n          'prose-code:py-0.5',\n          'prose-code:rounded',\n          'prose-pre:bg-transparent',\n          'prose-pre:p-0',\n          // Links\n          'prose-a:text-primary',\n          'prose-a:no-underline',\n          'prose-a:font-medium',\n          'hover:prose-a:text-primary/80',\n          'hover:prose-a:underline',\n          // Blockquotes\n          'prose-blockquote:border-l-primary/30',\n          'prose-blockquote:text-muted-foreground',\n          // Lists\n          'prose-ul:list-disc',\n          'prose-ol:list-decimal',\n          // Tables\n          'prose-table:border-collapse',\n          'prose-table:overflow-hidden',\n          'prose-table:rounded-lg',\n          'prose-table:border',\n          'prose-table:border-border',\n          'prose-th:bg-muted/10 dark:prose-th:bg-muted/80',\n          'prose-th:font-semibold',\n          'prose-th:px-3',\n          'prose-th:py-2',\n          'prose-th:border-b',\n          'prose-th:border-border',\n          'prose-td:bg-white dark:prose-td:bg-muted/10',\n          'prose-td:px-3',\n          'prose-td:py-2',\n          'prose-td:border-t',\n          'prose-td:border-border',\n          'prose-tbody:prose-tr:border-b',\n          'prose-tbody:prose-tr:border-border/50',\n          // Spacing adjustments\n          '[&>*:first-child]:mt-0',\n          '[&>*:last-child]:mb-0',\n          '[&_.markdown-block:empty]:hidden',\n          // Image handling\n          'prose-img:rounded-lg',\n          'prose-img:shadow-md',\n          // Horizontal rules\n          'prose-hr:border-border',\n          proseClassName,\n          className\n        )}\n        {...props}\n      >\n        {processedContent}\n      </div>\n    );\n  }\n);\n\nMarkdown.displayName = 'Markdown';\n\nexport { Markdown };\nexport type { MarkdownProps };\n",
      "type": "registry:component",
      "target": "components/chatblocks/markdown.tsx"
    },
    {
      "path": "src/components/chatblocks/code-block.tsx",
      "content": "'use client';\n\nimport { useTheme } from 'next-themes';\nimport * as React from 'react';\nimport { codeToHtml } from 'shiki';\nimport { cn } from '@/lib/utils';\n\n// Main container component for code blocks\nexport interface CodeBlockProps extends React.HTMLAttributes<HTMLDivElement> {\n  children?: React.ReactNode;\n}\n\nexport function CodeBlock({\n  className,\n  children,\n  ...restProps\n}: CodeBlockProps) {\n  return (\n    <article\n      aria-label=\"Code block\"\n      className={cn(\n        'not-prose relative flex w-full flex-col overflow-hidden',\n        'rounded-xl border border-border',\n        'bg-card text-card-foreground shadow-xs',\n        className\n      )}\n      {...restProps}\n    >\n      {children}\n    </article>\n  );\n}\n\n// Syntax highlighted code renderer\nexport interface CodeBlockCodeProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  code: string;\n  language?: string;\n}\n\nexport function CodeBlockCode({\n  code,\n  language = 'typescript',\n  className,\n  ...restProps\n}: CodeBlockCodeProps) {\n  const [renderedCode, setRenderedCode] = React.useState<string>('');\n  const [isLoading, setIsLoading] = React.useState(true);\n  const { resolvedTheme } = useTheme();\n\n  const syntaxTheme = React.useMemo(\n    () => (resolvedTheme === 'dark' ? 'vesper' : 'github-light'),\n    [resolvedTheme]\n  );\n\n  React.useEffect(() => {\n    let isCancelled = false;\n\n    // biome-ignore lint/complexity/noExcessiveCognitiveComplexity: acceptable here\n    const renderSyntaxHighlight = async () => {\n      setIsLoading(true);\n\n      try {\n        if (!code?.trim()) {\n          setRenderedCode('<pre class=\"empty-code\"><code></code></pre>');\n          return;\n        }\n\n        const highlighted = await codeToHtml(code, {\n          lang: language || 'text',\n          theme: syntaxTheme,\n        });\n\n        if (!isCancelled) {\n          setRenderedCode(highlighted);\n        }\n      } catch {\n        if (!isCancelled) {\n          setRenderedCode(\n            `<pre><code class=\"language-${language}\">${escapeHtml(code)}</code></pre>`\n          );\n        }\n      } finally {\n        if (!isCancelled) {\n          setIsLoading(false);\n        }\n      }\n    };\n\n    renderSyntaxHighlight();\n\n    return () => {\n      isCancelled = true;\n    };\n  }, [code, language, syntaxTheme]);\n\n  const containerStyles = cn(\n    'w-full overflow-x-auto',\n    'text-[13px] leading-relaxed',\n    '[&>pre]:px-4 [&>pre]:py-3.5 [&>pre]:pb-6',\n    '[&>pre]:m-0',\n    '[&_code]:font-mono',\n    className\n  );\n\n  if (isLoading && code) {\n    return (\n      <div className={containerStyles} {...restProps}>\n        <pre className=\"animate-pulse\">\n          <code className=\"opacity-60\">{code}</code>\n        </pre>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={containerStyles}\n      dangerouslySetInnerHTML={{ __html: renderedCode }}\n      data-language={language}\n      {...restProps}\n    />\n  );\n}\n\n// Toolbar\nexport interface CodeBlockGroupProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  children?: React.ReactNode;\n}\n\nexport function CodeBlockGroup({\n  children,\n  className,\n  ...restProps\n}: CodeBlockGroupProps) {\n  return (\n    <header\n      className={cn(\n        'flex items-center justify-between',\n        'border-border/50 border-b',\n        'px-4 py-2',\n        className\n      )}\n      {...restProps}\n    >\n      {children}\n    </header>\n  );\n}\n\n// Helper function to escape HTML\nfunction escapeHtml(text: string): string {\n  const htmlEntities: Record<string, string> = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n  };\n\n  return text.replace(/[&<>\"']/g, (match) => htmlEntities[match]);\n}\n",
      "type": "registry:component",
      "target": "components/chatblocks/code-block.tsx"
    }
  ],
  "categories": [
    "ai",
    "chatblocks"
  ]
}