{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "markdown",
  "type": "registry:block",
  "title": "Markdown",
  "description": "A markdown rendering component for AI chat applications with syntax highlighting.",
  "dependencies": [
    "react-markdown"
  ],
  "registryDependencies": [
    "code-block"
  ],
  "files": [
    {
      "path": "src/components/chatblocks/markdown.tsx",
      "content": "'use client';\n\nimport { marked } from 'marked';\nimport * as React from 'react';\nimport { cn } from '@/lib/utils';\nimport { CodeBlock, CodeBlockCode } from './code-block';\n\ninterface MarkdownProps extends React.HTMLAttributes<HTMLDivElement> {\n  content: string;\n  /** Custom renderer for code blocks */\n  renderCodeBlock?: (\n    code: string,\n    language?: string,\n    index?: number\n  ) => React.ReactNode;\n  /** Additional prose class names */\n  proseClassName?: string;\n}\n\nconst Markdown = React.memo(\n  ({\n    className,\n    content,\n    renderCodeBlock,\n    proseClassName,\n    ...props\n  }: MarkdownProps) => {\n    const processedContent = React.useMemo(() => {\n      if (!content) { return null; }\n\n      try {\n        const tokens = marked.lexer(content);\n\n        return tokens\n          .map((token, index) => {\n            // Handle code blocks with custom renderer\n            if (token.type === 'code') {\n              if (renderCodeBlock) {\n                return (\n                  <React.Fragment key={`code-${index}`}>\n                    {renderCodeBlock(token.text, token.lang, index)}\n                  </React.Fragment>\n                );\n              }\n\n              return (\n                <CodeBlock className=\"my-4\" key={`code-${index}`}>\n                  <CodeBlockCode code={token.text} language={token.lang} />\n                </CodeBlock>\n              );\n            }\n\n            // Parse other tokens\n            const html = marked.parser([token]);\n\n            // Skip empty paragraphs\n            if (token.type === 'paragraph' && !token.text?.trim()) {\n              return null;\n            }\n\n            return (\n              <div\n                className=\"markdown-block\"\n                dangerouslySetInnerHTML={{ __html: html }}\n                key={`block-${index}`}\n              />\n            );\n          })\n          .filter(Boolean);\n      } catch {\n        // Fallback to basic HTML rendering\n        return (\n          <div\n            dangerouslySetInnerHTML={{\n              __html: marked.parse(content),\n            }}\n          />\n        );\n      }\n    }, [content, renderCodeBlock]);\n\n    return (\n      <div\n        className={cn(\n          'prose prose-sm max-w-none',\n          // Base text colors\n          'prose-headings:text-foreground',\n          'prose-p:text-foreground',\n          'prose-li:text-foreground',\n          'prose-td:text-foreground',\n          'prose-th:text-foreground',\n          // Emphasis and strong\n          'prose-em:text-foreground',\n          'prose-strong:text-foreground',\n          // Code styling\n          'prose-code:text-foreground',\n          'prose-code:bg-muted',\n          'prose-code:px-1',\n          'prose-code:py-0.5',\n          'prose-code:rounded',\n          'prose-pre:bg-transparent',\n          'prose-pre:p-0',\n          // Links\n          'prose-a:text-primary',\n          'prose-a:no-underline',\n          'prose-a:font-medium',\n          'hover:prose-a:text-primary/80',\n          'hover:prose-a:underline',\n          // Blockquotes\n          'prose-blockquote:border-l-primary/30',\n          'prose-blockquote:text-muted-foreground',\n          // Lists\n          'prose-ul:list-disc',\n          'prose-ol:list-decimal',\n          // Tables\n          'prose-table:border-collapse',\n          'prose-table:overflow-hidden',\n          'prose-table:rounded-lg',\n          'prose-table:border',\n          'prose-table:border-border',\n          'prose-th:bg-muted/10 dark:prose-th:bg-muted/80',\n          'prose-th:font-semibold',\n          'prose-th:px-3',\n          'prose-th:py-2',\n          'prose-th:border-b',\n          'prose-th:border-border',\n          'prose-td:bg-white dark:prose-td:bg-muted/10',\n          'prose-td:px-3',\n          'prose-td:py-2',\n          'prose-td:border-t',\n          'prose-td:border-border',\n          'prose-tbody:prose-tr:border-b',\n          'prose-tbody:prose-tr:border-border/50',\n          // Spacing adjustments\n          '[&>*:first-child]:mt-0',\n          '[&>*:last-child]:mb-0',\n          '[&_.markdown-block:empty]:hidden',\n          // Image handling\n          'prose-img:rounded-lg',\n          'prose-img:shadow-md',\n          // Horizontal rules\n          'prose-hr:border-border',\n          proseClassName,\n          className\n        )}\n        {...props}\n      >\n        {processedContent}\n      </div>\n    );\n  }\n);\n\nMarkdown.displayName = 'Markdown';\n\nexport { Markdown };\nexport type { MarkdownProps };\n",
      "type": "registry:component",
      "target": "components/chatblocks/markdown.tsx"
    }
  ]
}