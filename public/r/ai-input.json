{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ai-input",
  "type": "registry:block",
  "title": "AI Input",
  "description": "A comprehensive AI input component with model selector and submit handling.",
  "files": [
    {
      "path": "src/components/chatblocks/ai-input.tsx",
      "content": "'use client';\n\nimport { ArrowUp } from 'lucide-react';\nimport type * as React from 'react';\nimport { Button } from '@/components/ui/button';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { cn } from '@/lib/utils';\n\nfunction AIInput({\n  className,\n  ...props\n}: React.FormHTMLAttributes<HTMLFormElement>) {\n  return (\n    <form\n      className={cn(\n        'relative flex w-full max-w-3xl flex-col overflow-hidden rounded-3xl border bg-background shadow-xs transition-colors focus-within:border-ring/30',\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\ninterface AIInputFieldProps extends React.ComponentProps<typeof Textarea> {\n  onSubmit?: () => void;\n}\n\nfunction AIInputField({\n  className,\n  onSubmit,\n  onKeyDown,\n  ...props\n}: AIInputFieldProps) {\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      onSubmit?.();\n    }\n    onKeyDown?.(e);\n  };\n\n  return (\n    <Textarea\n      className={cn(\n        'max-h-[180px] min-h-[56px] resize-none overflow-y-auto border-none px-5 py-3.5 text-base shadow-none placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-0',\n        'bg-transparent dark:bg-transparent',\n        className\n      )}\n      onKeyDown={handleKeyDown}\n      {...props}\n    />\n  );\n}\n\nfunction AIInputToolbar({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn('flex items-center justify-between px-3 py-2', className)}\n      {...props}\n    />\n  );\n}\n\nfunction AIInputToolbarLeft({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div className={cn('flex items-center gap-2', className)} {...props} />\n  );\n}\n\nfunction AIInputToolbarRight({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn('flex flex-1 items-center justify-end gap-2', className)}\n      {...props}\n    />\n  );\n}\n\ninterface AIInputSubmitProps extends React.ComponentProps<typeof Button> {\n  icon?: React.ReactNode;\n}\n\nfunction AIInputSubmit({\n  className,\n  icon,\n  children,\n  ...props\n}: AIInputSubmitProps) {\n  return (\n    <Button\n      className={cn(\n        'h-8 w-8 rounded-full bg-foreground text-background hover:bg-foreground/90',\n        className\n      )}\n      size=\"icon\"\n      type=\"submit\"\n      {...props}\n    >\n      {children || icon || <ArrowUp className=\"h-5 w-5\" />}\n    </Button>\n  );\n}\n\ninterface AIInputModelSelectorProps {\n  value?: string;\n  onValueChange?: (value: string) => void;\n  models?: Array<{ label: string; value: string }>;\n  placeholder?: string;\n  className?: string;\n}\n\nfunction AIInputModelSelector({\n  value,\n  onValueChange,\n  models = [],\n  placeholder = 'Select model',\n  className,\n}: AIInputModelSelectorProps) {\n  return (\n    <Select onValueChange={onValueChange} value={value}>\n      <SelectTrigger\n        className={cn(\n          'h-8 gap-1 rounded-2xl border px-2 text-sm hover:bg-accent',\n          className\n        )}\n      >\n        <SelectValue placeholder={placeholder} />\n      </SelectTrigger>\n      <SelectContent>\n        {models.map((model) => (\n          <SelectItem key={model.value} value={model.value}>\n            {model.label}\n          </SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n  );\n}\n\nexport {\n  AIInput,\n  AIInputField,\n  AIInputToolbar,\n  AIInputToolbarLeft,\n  AIInputToolbarRight,\n  AIInputSubmit,\n  AIInputModelSelector,\n};\nexport type {\n  AIInputFieldProps,\n  AIInputSubmitProps,\n  AIInputModelSelectorProps,\n};\n",
      "type": "registry:component",
      "target": "components/chatblocks/ai-input.tsx"
    }
  ]
}