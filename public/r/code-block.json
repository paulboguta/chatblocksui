{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "code-block",
  "type": "registry:ui",
  "title": "Code Block",
  "description": "A syntax highlighted code block component with Shiki for AI-generated code.",
  "dependencies": [
    "shiki",
    "next-themes"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "src/components/chatblocks/code-block.tsx",
      "content": "'use client';\n\nimport { useTheme } from 'next-themes';\nimport * as React from 'react';\nimport { codeToHtml } from 'shiki';\nimport { cn } from '@/lib/utils';\n\n// Main container component for code blocks\nexport interface CodeBlockProps extends React.HTMLAttributes<HTMLDivElement> {\n  children?: React.ReactNode;\n}\n\nexport function CodeBlock({\n  className,\n  children,\n  ...restProps\n}: CodeBlockProps) {\n  return (\n    <article\n      aria-label=\"Code block\"\n      className={cn(\n        'not-prose relative flex w-full flex-col overflow-hidden',\n        'rounded-xl border border-border',\n        'bg-card text-card-foreground shadow-xs',\n        className\n      )}\n      {...restProps}\n    >\n      {children}\n    </article>\n  );\n}\n\n// Syntax highlighted code renderer\nexport interface CodeBlockCodeProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  code: string;\n  language?: string;\n}\n\nexport function CodeBlockCode({\n  code,\n  language = 'typescript',\n  className,\n  ...restProps\n}: CodeBlockCodeProps) {\n  const [renderedCode, setRenderedCode] = React.useState<string>('');\n  const [isLoading, setIsLoading] = React.useState(true);\n  const { resolvedTheme } = useTheme();\n\n  const syntaxTheme = React.useMemo(\n    () => (resolvedTheme === 'dark' ? 'vesper' : 'github-light'),\n    [resolvedTheme]\n  );\n\n  React.useEffect(() => {\n    let isCancelled = false;\n\n    // biome-ignore lint/complexity/noExcessiveCognitiveComplexity: acceptable here\n    const renderSyntaxHighlight = async () => {\n      setIsLoading(true);\n\n      try {\n        if (!code?.trim()) {\n          setRenderedCode('<pre class=\"empty-code\"><code></code></pre>');\n          return;\n        }\n\n        const highlighted = await codeToHtml(code, {\n          lang: language || 'text',\n          theme: syntaxTheme,\n        });\n\n        if (!isCancelled) {\n          setRenderedCode(highlighted);\n        }\n      } catch {\n        if (!isCancelled) {\n          setRenderedCode(\n            `<pre><code class=\"language-${language}\">${escapeHtml(code)}</code></pre>`\n          );\n        }\n      } finally {\n        if (!isCancelled) {\n          setIsLoading(false);\n        }\n      }\n    };\n\n    renderSyntaxHighlight();\n\n    return () => {\n      isCancelled = true;\n    };\n  }, [code, language, syntaxTheme]);\n\n  const containerStyles = cn(\n    'w-full overflow-x-auto',\n    'text-[13px] leading-relaxed',\n    '[&>pre]:px-4 [&>pre]:py-3.5 [&>pre]:pb-6',\n    '[&>pre]:m-0',\n    '[&_code]:font-mono',\n    className\n  );\n\n  if (isLoading && code) {\n    return (\n      <div className={containerStyles} {...restProps}>\n        <pre className=\"animate-pulse\">\n          <code className=\"opacity-60\">{code}</code>\n        </pre>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={containerStyles}\n      dangerouslySetInnerHTML={{ __html: renderedCode }}\n      data-language={language}\n      {...restProps}\n    />\n  );\n}\n\n// Toolbar\nexport interface CodeBlockGroupProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  children?: React.ReactNode;\n}\n\nexport function CodeBlockGroup({\n  children,\n  className,\n  ...restProps\n}: CodeBlockGroupProps) {\n  return (\n    <header\n      className={cn(\n        'flex items-center justify-between',\n        'border-border/50 border-b',\n        'px-4 py-2',\n        className\n      )}\n      {...restProps}\n    >\n      {children}\n    </header>\n  );\n}\n\n// Helper function to escape HTML\nfunction escapeHtml(text: string): string {\n  const htmlEntities: Record<string, string> = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n  };\n\n  return text.replace(/[&<>\"']/g, (match) => htmlEntities[match]);\n}\n",
      "type": "registry:component",
      "target": "components/chatblocks/code-block.tsx"
    }
  ],
  "categories": [
    "ai",
    "chatblocks"
  ]
}